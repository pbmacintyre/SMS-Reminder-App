<?php
/**
 * Copyright (C) 2019-2025 Paladin Business Solutions
 */

/* ======================== */
/* DB interaction functions */
/* ======================== */

function db_credentials () {
	require(__DIR__ . '/vendor/autoload.php');
	$dotenv = Dotenv\Dotenv::createImmutable(__DIR__)->load();

	$servername = $_ENV['DB_SERVER_NAME'];
	$username = $_ENV['DB_USER_NAME'];
	$password = $_ENV['DB_PWD'];
	$dbname = $_ENV['DB_NAME'];

	// Create connection
	return new PDO("pgsql:host=$servername;dbname=$dbname", $username, $password);
}

function db_record_insert ($table, $columns_data, $primary="") {
	/*
	Usage:
	$table = "table_name";
	$columns_data = array (
	   "user_email" => "pbmacintyre@example.com",
	   "firstname" => "Peter",
	   "lastname" => "Johnston",   );
	$new_client_id = db_record_insert($table, $columns_data, "client_id");
	*/

	$values = "";
	$conn = db_credentials();
	$sql = "INSERT INTO $table (";

	$columns_data = array_map('htmlspecialchars', $columns_data);

	foreach ($columns_data as $key => $value) {
		$sql .= "$key, ";
		$values .= ":$key, ";
	}

	$length = strlen($sql);
	$sql = substr($sql, 0, $length - 2) . substr($sql, -1);

	$length = strlen($values);
	$values = substr($values, 0, $length - 2) . substr($values, -1);

	// RETURNING gives the new id number in an auto-increment situation
	$sql .= ") VALUES (" . $values . ") ";

	if ($primary !== "") {
		$sql .= "RETURNING $primary";
	}

	$stmt = $conn->prepare($sql);

	// Bind parameters
	foreach ($columns_data as $key => $value) {
		$stmt->bindParam(":$key", $columns_data["$key"]);
	}

//	echo_spaces("SQL Statement", $stmt);

	$stmt->execute();
	if ($primary !== "") {
		return $stmt->fetchColumn();
	} else {
		return ;
	}
}

function db_record_select ($table, $columns_data, $where_info = "", $condition = "", $orderby = "") {
    /*
    Usage:
    $table = "table_name";
    $columns_data = "*" => all fields OR
    $columns_data = array ("ringcentral_control_id", "webhook_token", );
    $where_info = array ("ringcentral_control_id", 1);  OR
    $where_info = array ("from_number", "+18084652471", "webhook_token", "5", );
    $condition = "AND" or "OR"
    ONLY ALLOWS for ONE Conditional statement in the WHERE clause
    $orderby = "";

    $db_result = db_record_select($table, $columns_data, $where_info = "", $condition = "" );
    returns assoc array (or false):
       $db_result[0]['field_name']...
       for multiple rows returned:
       foreach ($db_result as $row) {
            echo_spaces("Record ID", $row['ringcentral_control_id']);
       }
    */
    $conn = db_credentials();
    $sql = "SELECT ";
    if ($columns_data == "*") {
        // get all fields
        $sql .= " * ";
    } else {
        foreach ($columns_data as $value) {
            $sql .= "$value, ";
        }
        $length = strlen($sql);
        // remove the trailing comma generated by the foreach loop
        $sql = substr($sql, 0, $length - 2) . substr($sql, -1);
    }
    $sql .= "FROM $table";
    if ($where_info) {
        $sql .= " WHERE $where_info[0] = '$where_info[1]'";
        if ($condition) {
            $sql .= " $condition $where_info[2] = '$where_info[3]'" ;
        }
    }
	if ($orderby) {
		$sql .= " ORDER BY $orderby";
	}
//    echo_spaces("SQL Text", $sql, 2);
    $stmt = $conn->prepare($sql);

    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (Exception $e) {
        return false;
    }
}

function db_record_update ($table, $id, $fields_data) {
    /*
    Usage:
    $table = "shopify_shops";
    $id = $_SESSION['user_id'];
    $fields_data = $fields_data = array(
                "firstname" => $firstname,
                "lastname" => $lastname,
                "store_name" => $store_name,
            );
    db_record_update($table, $id, $fields_data ) ;
    */
    $conn = db_credentials();

    $sql = "UPDATE $table SET ";
    foreach ($fields_data as $key => $value) {
        $sql .= "$key = :$key, ";
        $value_string["$key"] = $value;
    }
    $length = strlen($sql);
    $sql = substr($sql, 0, $length - 2) . substr($sql, -1);
    $sql .= "WHERE id = :id ";

    $stmt = $conn->prepare($sql);

    foreach ($fields_data as $key => $value) {
        $stmt->bindParam(":$key", $fields_data["$key"]);
    }
    $stmt->bindParam(":id", $id);

    $stmt->execute();
}

function db_record_delete ($table, $where_col, $where_data) {
    /*
    Usage:
    $table = "shopify_shops";
    $where_col = "column name";
    $where_data = "column value"
    */
    $conn = db_credentials();
    $sql = "DELETE FROM $table WHERE $where_col = :where_data ";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':where_data', $where_data);
    $stmt->execute();
}
